generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["tracing"]
}

// datasource db {
//     provider     = "mysql"
//     url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
//     directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//     relationMode = "prisma"
// }

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL") // uses connection pooling
    relationMode = "prisma"
}

generator prismaClient {
    provider        = "prisma-client-js"
    previewFeatures = ["tracing"]
    binaryTargets   = ["native"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments

model MoviesInfo {
    id           Int           @id @default(autoincrement()) @map("id")
    code         String?       @unique(map: "code_uni") @map("code") @db.VarChar(100)
    prefix       String?       @map("prefix") @db.VarChar(100)
    duration     String?       @map("duration") @db.VarChar(100)
    rate         Decimal?      @map("rate") @db.Decimal(10, 2)
    rateNum      Int?          @map("rate_num")
    releaseDate  DateTime?     @map("release_date") @db.Date
    releaseYear  Int?          @map("release_year")
    crawlWebsite String?       @map("crawl_website") @db.VarChar(100)
    crawlUrl     String?       @map("crawl_url") @db.VarChar(200)
    batchNum     String?       @map("batch_num") @db.VarChar(300)
    updatedTime  DateTime?     @map("updated_time") @db.Timestamp()
    createdTime  DateTime?     @default(now()) @map("created_time")
    actresses    Actress[]     @relation("actress_on_movie")
    tags         MoviesTag[]   @relation("tag_on_movie")
    files        FilesInfo[]
    magnetLinks  MagnetLinks[]

    collections MoviesCollection[] // 关联到收藏
    downloads   MoviesVideoResource[]

    @@map("movies_info")
}

model Actress {
    id          Int          @id @default(autoincrement()) @map("id")
    actressName String?      @unique @map("actress_name") @db.VarChar(100)
    birthDay    DateTime?    @map("birth_day") @db.Date
    isBlock     String?      @default("0") @map("is_block") @db.VarChar(10)
    movies      MoviesInfo[] @relation("actress_on_movie")

    @@map("actress")
}

model CrawlInfo {
    id                Int       @id @default(autoincrement()) @map("id")
    batchId           String    @map("batch_id") @db.VarChar(255)
    newlyIncreasedNum Int?      @default(0) @map("newly_increased_num")
    updatedNum        Int?      @default(0) @map("updated_num")
    downloadSize      String?   @map("download_size") @db.VarChar(100)
    duration          Int?      @map("duration")
    checked           String?   @default("0") @map("checked") @db.VarChar(10)
    createdTime       DateTime? @default(now()) @map("created_time")

    @@map("crawl_info")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model FilesInfo {
    id         Int         @id @default(autoincrement()) @map("id")
    bucketName String?     @map("bucket_name") @db.VarChar(100)
    path       String?     @map("path") @db.VarChar(200)
    size       String?     @map("size") @db.VarChar(100)
    moviesId   Int?        @map("movies_id")
    type       Int?        @map("type")
    movie      MoviesInfo? @relation(fields: [moviesId], references: [id])

    @@index([moviesId], map: "files_info_movies_id_index")
    @@map("files_info")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MagnetLinks {
    id         Int         @id @default(autoincrement()) @map("id")
    moviesId   Int?        @map("movies_id")
    linkUrl    String?     @map("link_url") @db.VarChar(1000)
    size       String?     @map("size") @db.VarChar(100)
    uploadTime String?     @map("upload_time") @db.VarChar(100)
    movie      MoviesInfo? @relation(fields: [moviesId], references: [id])

    @@index([moviesId], map: "magnet_links_movies_id_index")
    @@map("magnet_links")
}

model MoviesCollection {
    id          Int      @id @default(autoincrement()) @map("id")
    movieCode   String   @unique @map("movie_code") @db.VarChar(100)
    createdTime DateTime @default(now()) @map("created_time") @db.Timestamp()

    MovieInfo MoviesInfo? @relation(fields: [movieCode], references: [code])

    @@map("movies_collection")
}

model MoviesTag {
    id          Int          @id @default(autoincrement()) @map("id")
    tagName     String?      @unique @map("tag_name") @db.VarChar(100)
    createdTime DateTime?    @default(now()) @map("created_time")
    movies      MoviesInfo[] @relation("tag_on_movie")

    @@map("movies_tag")
}

model MoviesVideoResource {
    id          Int         @id @default(autoincrement()) @map("id")
    movieCode   String?     @map("movie_code") @db.VarChar(100)
    path        String?     @map("path") @db.VarChar(400)
    size        String?     @map("size") @db.VarChar(100)
    createdTime DateTime?   @default(now()) @map("created_time")
    MovieInfo   MoviesInfo? @relation(fields: [movieCode], references: [code])

    @@map("movies_video_resource")
}
