generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["tracing"]
}

generator prismaClient {
    provider        = "prisma-client-js"
    previewFeatures = ["tracing"]
    binaryTargets   = ["native"]
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model MoviesInfo {
    id           Int                   @id @default(autoincrement()) @map("id")
    code         String?               @unique(map: "code_uni") @map("code") @db.VarChar(100)
    prefix       String?               @map("prefix") @db.VarChar(100)
    duration     String?               @map("duration") @db.VarChar(100)
    rate         Decimal?              @map("rate") @db.Decimal(10, 2)
    rateNum      Int?                  @map("rate_num")
    releaseDate  DateTime?             @map("release_date") @db.Date
    releaseYear  Int?                  @map("release_year")
    crawlWebsite String?               @map("crawl_website") @db.VarChar(100)
    crawlUrl     String?               @map("crawl_url") @db.VarChar(200)
    batchNum     String?               @map("batch_num") @db.VarChar(300)
    updatedTime  DateTime?             @map("updated_time") @db.Timestamp(6)
    createdTime  DateTime?             @default(now()) @map("created_time")
    actresses    Actress[]             @relation("actress_on_movie")
    tags         MoviesTag[]           @relation("tag_on_movie")
    files        FilesInfo[]
    magnetLinks  MagnetLinks[]
    collections  MoviesCollection[]
    downloads    MoviesVideoResource[]

    @@map("movies_info")
}

model Actress {
    id           Int          @id @default(autoincrement()) @map("id")
    actressName  String?      @unique @map("actress_name") @db.VarChar(100)
    birthDay     DateTime?    @map("birth_day") @db.Date
    avatarBase64 String?      @map("avatar_base64") @db.Text
    isBlock      String?      @default("0") @map("is_block") @db.VarChar(10)
    movies       MoviesInfo[] @relation("actress_on_movie")
    actressFavs  ActressFav[]

    @@map("actress")
}

model CrawlInfo {
    id                Int       @id @default(autoincrement()) @map("id")
    batchId           String    @map("batch_id") @db.VarChar(255)
    newlyIncreasedNum Int?      @default(0) @map("newly_increased_num")
    updatedNum        Int?      @default(0) @map("updated_num")
    downloadSize      String?   @map("download_size") @db.VarChar(100)
    duration          Int?      @map("duration")
    checked           String?   @default("0") @map("checked") @db.VarChar(10)
    createdTime       DateTime? @default(now()) @map("created_time")

    @@map("crawl_info")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model FilesInfo {
    id         Int         @id @default(autoincrement()) @map("id")
    bucketName String?     @map("bucket_name") @db.VarChar(100)
    path       String?     @map("path") @db.VarChar(200)
    size       String?     @map("size") @db.VarChar(100)
    moviesId   Int?        @map("movies_id")
    type       Int?        @map("type")
    onlineUrl  String?     @map("online_url")
    movie      MoviesInfo? @relation(fields: [moviesId], references: [id])

    @@index([moviesId], map: "files_info_movies_id_index")
    @@map("files_info")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MagnetLinks {
    id         Int         @id @default(autoincrement()) @map("id")
    moviesId   Int?        @map("movies_id")
    linkUrl    String?     @map("link_url") @db.VarChar(1000)
    size       String?     @map("size") @db.VarChar(100)
    uploadTime String?     @map("upload_time") @db.VarChar(100)
    movie      MoviesInfo? @relation(fields: [moviesId], references: [id])

    @@index([moviesId], map: "magnet_links_movies_id_index")
    @@map("magnet_links")
}

model MoviesCollection {
    id          Int         @id @default(autoincrement()) @map("id")
    movieCode   String      @unique @map("movie_code") @db.VarChar(100)
    createdTime DateTime    @default(now()) @map("created_time") @db.Timestamp(6)
    MovieInfo   MoviesInfo? @relation(fields: [movieCode], references: [code])

    @@map("movies_collection")
}

model MoviesTag {
    id          Int          @id @default(autoincrement()) @map("id")
    tagName     String?      @unique @map("tag_name") @db.VarChar(100)
    createdTime DateTime?    @default(now()) @map("created_time")
    movies      MoviesInfo[] @relation("tag_on_movie")

    @@map("movies_tag")
}

model MoviesVideoResource {
    id          Int         @id @default(autoincrement()) @map("id")
    movieCode   String?     @map("movie_code") @db.VarChar(100)
    path        String?     @map("path") @db.VarChar(400)
    size        String?     @map("size") @db.VarChar(100)
    createdTime DateTime?   @default(now()) @map("created_time")
    MovieInfo   MoviesInfo? @relation(fields: [movieCode], references: [code])

    @@map("movies_video_resource")
}

model DownloadStatistics {
    id            Int       @id @default(autoincrement())
    total_size    BigInt
    start_time    DateTime  @db.Timestamptz(6)
    end_time      DateTime? @db.Timestamptz(6)
    duration      Float?
    success_count Int
    failure_count Int
    total_count   Int
    batch_id      String?   @db.VarChar(100)
    created_at    DateTime? @db.Date

    @@map("download_statistics")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model DownloadUrls {
    id      Int     @id(map: "downloads_urls_pkey") @default(autoincrement())
    batchId String? @map("batch_id")
    url     String
    code    String
    status  Int     @default(0)
    size    Int?
    type    Int?

    @@map("download_urls")
}

model ActressFav {
    id          Int       @id @default(autoincrement()) @map("id")
    actressName String?   @unique @map("actress_name") @db.VarChar(100)
    createdTime DateTime? @default(now()) @map("created_time")

    Actress Actress? @relation(fields: [actressName], references: [actressName])

    @@map("actress_fav")
}

model CrawlSourceData {
    id          Int     @id @default(autoincrement())
    data        Json
    code        String? @default(dbgenerated("(data ->> 'code'::text)"))
    batchId     String? @default(dbgenerated("(data ->> 'batch_id'::text)")) @map("batch_id")
    createdTime String? @default(dbgenerated("(data ->> 'created_time'::text)")) @map("created_time")
    updatedTime String? @default(dbgenerated("(data ->> 'updated_time'::text)")) @map("updated_time")

    @@map("crawl_source_data")
}

model CrawlStat {
    id                Int       @id @default(autoincrement())
    batchId           String?   @unique @map("batch_id")
    status            Int?      @default(0)
    transStatus       Int?      @default(0) @map("trans_status")
    downloadStatus    Int?      @default(0) @map("download_status")
    startedTime       DateTime? @map("started_time") @db.Timestamp(6)
    endTime           DateTime? @map("end_time") @db.Timestamp(6)
    crawlParams       Json?     @map("crawl_params")
    executeType       String?      @map("execute_type")
    newlyIncreasedNum Int?      @default(0) @map("newly_increased_num")
    updatedNum        Int?      @default(0) @map("updated_num")
    downloadSize      String?   @map("download_size")

    @@map("crawl_stat")
}
