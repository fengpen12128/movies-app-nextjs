generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

// datasource db {
//     provider     = "mysql"
//     url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
//     directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//     relationMode = "prisma"
// }

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL") // uses connection pooling
  relationMode = "prisma"
}

generator prismaClient {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
  binaryTargets   = ["native"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Actress {
  id          Int         @id @default(autoincrement())
  actressName String?     @db.VarChar(100)
  birthDay    DateTime?   @db.Date
  isBlock     String?     @default("0") @db.VarChar(10)
  movies      MovieInfo[] @relation("ActressMovie")
}

model MovieInfo {
  id           Int                   @id @default(autoincrement())
  code         String?               @unique(map: "code_uni") @db.VarChar(100)
  prefix       String?               @db.VarChar(100)
  duration     String?               @db.VarChar(100)
  rate         Decimal?              @db.Decimal(10, 2)
  rateNum      Int?
  releaseDate  DateTime?             @db.Date
  releaseYear  Int?
  crawlWebsite String?               @db.VarChar(100)
  crawlUrl     String?               @db.VarChar(200)
  batchNum     String?               @db.VarChar(300)
  updatedTime  DateTime?             @db.Timestamp()
  createdTime  DateTime?             @default(now())
  actresses    Actress[]             @relation("ActressMovie")
  files        FilesInfo[]
  magnetLinks  MagnetLinks[]
  collections  MoviesCollection[] // 关联到收藏
  downloads    MoviesVideoResource[]

  tags MoviesTag[] @relation("MoviesOnTag")
}

model CrawlInfo {
  id                Int       @id @default(autoincrement())
  batchId           String    @db.VarChar(255)
  newlyIncreasedNum Int?      @default(0)
  updatedNum        Int?      @default(0)
  downloadSize      String?   @db.VarChar(100)
  duration          Int?
  checked           String?   @default("0") @db.VarChar(10)
  createdTime       DateTime? @default(now())
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model FilesInfo {
  id         Int        @id @default(autoincrement())
  bucketName String?    @db.VarChar(100)
  path       String?    @db.VarChar(200)
  size       String?    @db.VarChar(100)
  moviesId   Int?
  type       Int?
  movie      MovieInfo? @relation(fields: [moviesId], references: [id])

  @@index([moviesId], map: "files_info_movies_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MagnetLinks {
  id         Int        @id @default(autoincrement())
  moviesId   Int?
  linkUrl    String?    @db.VarChar(1000)
  size       String?    @db.VarChar(100)
  uploadTime String?    @db.VarChar(100)
  movie      MovieInfo? @relation(fields: [moviesId], references: [id])

  @@index([moviesId], map: "magnet_links_movies_id_index")
}

model MoviesCollection {
  id          Int        @id @default(autoincrement())
  moviesCode  String     @unique @db.VarChar(100)
  createdTime DateTime   @default(now()) @db.Timestamp()
  MovieInfo   MovieInfo? @relation(fields: [moviesCode], references: [code])
}

model MoviesTag {
  id          Int         @id @default(autoincrement())
  tagName     String?     @db.VarChar(100)
  createdTime DateTime?   @default(now())
  movies      MovieInfo[] @relation("MoviesOnTag")
}

model MoviesVideoResource {
  id          Int        @id @default(autoincrement())
  movieCode   String     @db.VarChar(100)
  path        String?    @db.VarChar(400)
  size        String?    @db.VarChar(100)
  createdTime DateTime?  @default(now())
  MovieInfo   MovieInfo? @relation(fields: [movieCode], references: [code])
}
