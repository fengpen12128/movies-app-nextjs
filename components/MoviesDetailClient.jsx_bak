"use client";

import MoviesCard from "@/components/MoviesCard";
import MoviesPreview from "@/components/MediaPreview";
import { useState, useEffect } from "react";
import { usePathname, useRouter } from "next/navigation";
import {
  Badge,
  Button,
  Table,
  IconButton,
  Card,
  Spinner,
} from "@radix-ui/themes";
import { CopyIcon } from "@radix-ui/react-icons";
import { CopyToClipboard } from "react-copy-to-clipboard";
import { message } from "react-message-popup";
import { filesize } from "filesize";

const MoviesInfo = ({
  code,
  coverUrl,
  score,
  rateNum,
  duration,
  actress,
  releaseDate,
  collected: initialCollected,
  moviesTagList,
  videoFirst,
}) => {
  const [isCollected, setIsCollected] = useState(initialCollected);
  const handleActressClick = (name) => {};
  const toggleCollect = async () => {
    const resp = await fetch(`/api/movies/collected/${code}`);
    const data = await resp.json();

    if (resp.status === 500) {
      message.error(data.message, 1000);
      return;
    }

    setIsCollected(!isCollected);
    message.success(data.message, 1000);
  };

  const codeSplit = code.split("-");
  const router = useRouter();

  const handlePlay = () => {
    if (!videoFirst) {
      message.error("没有播放资源", 1000);
      return;
    }

    const url = `http://127.0.0.1:9000/demo/douying_sample.mp4`;
    window.open(url, "_blank", "noopener,noreferrer");
  };

  return (
    <div className="flex p-2">
      <img
        // className="w-1/2 mr-10 object-contain bg-gray-100 dark:bg-gray-800 "
        className="w-1/2 mr-10 object-contain "
        src={coverUrl}
        alt=""
      />

      <div className="w-1/2 ">
        <ul className="space-y-4">
          <li className="font-suse text-3xl text-secondary">
            <span
              className="hover:underline cursor-pointer"
              onClick={() => router.push(`/filter?prefix=${codeSplit[0]}`)}
            >
              {codeSplit[0]}
            </span>
            -{codeSplit[1]}
          </li>
          <li>
            <span className="text-gray-500 text-sm">评分：</span>
            {score}
          </li>
          <li>
            <span className="text-gray-500 text-sm">评分数：</span>
            {rateNum}
          </li>
          <li>
            <span className="text-gray-500 text-sm">时长：</span>
            {duration}
          </li>
          <li>
            <span className="text-gray-500 text-sm">演员：</span>
            {actress?.map((item, index) => (
              <span
                key={item.id}
                onClick={() => handleActressClick(item)}
                className="hover:underline cursor-pointer ml-1"
              >
                <Badge variant="surface" color="blue">
                  {item.actressName}
                </Badge>
              </span>
            ))}
          </li>
          <li>
            <span className="text-gray-500 text-sm">发行时间：</span>
            {new Date(releaseDate)?.toISOString().split("T")[0]}
          </li>
          <li>
            <span className="text-gray-500 text-sm">标签：</span>
            {moviesTagList?.map((item, index) => (
              <div key={index} className="badge badge-accent">
                {item.tagName}
              </div>
            ))}
          </li>
        </ul>
        <div className="flex space-x-2 ml-0 sm:ml-10 mt-4 sm:mt-12">
          <Button
            onClick={handlePlay}
            className="cursor-pointer"
            color="indigo"
            variant="soft"
          >
            立即播放
          </Button>
          <Button
            onClick={toggleCollect}
            className="cursor-pointer"
            color="crimson"
            variant="soft"
          >
            {isCollected ? "取消收藏" : "收藏"}
          </Button>
        </div>
      </div>
    </div>
  );
};

const DownloadResource = ({ videoResource = [] }) => {
  const videoServer = "http://192.168.1.22:9200/";
  const [resources, setResources] = useState(videoResource);

  useEffect(() => {
    const fetchVideoSize = async () => {
      const updatedResources = await Promise.all(
        videoResource.map(async (x) => {
          try {
            const res = await fetch(`${videoServer}${x.path}`, {
              method: "HEAD",
            });
            const size = res.headers.get("Content-Length");
            return { ...x, size: filesize(size) };
          } catch (error) {
            console.error("Error fetching video size:", error);
            return x;
          }
        })
      );
      setResources(updatedResources);
    };

    fetchVideoSize();
  }, [videoResource]);
  return (
    // <div className="bg-[#F4F4F5] my-10 rounded p-2 dark:bg-gray-800">
    <Card className="my-10">
      {/* <div className=" my-10 rounded p-2 "> */}
      <div className="   ">
        {/* <div className="divide-y divide-dashed pb-2">
          <div className="text-xl font-ma">选择播放</div>
        </div> */}
        <div className="text-xl font-ma">选择播放</div>

        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 mt-3">
          {resources.map((item, index) => (
            // <Button
            //   key={item.id}
            //   onClick={() => {
            //     const url = `iina://weblink?url=http://127.0.0.1:9000/demo/douying_sample.mp4`;
            //     const newWindow = window.open(url, '_blank', 'noopener,noreferrer');
            //     if (newWindow) newWindow.opener = null;
            //   }}
            //   variant="soft"
            //   color="gray"
            // >
            //   {item.path} ({item.size})
            // </Button>
            // <Button className="cursor-pointer" color="cyan" variant="outline">{item.path} ({item.size})</Button>
            <a key={item.id} href="iina://weblink?url=http://127.0.0.1:9000/demo/douying_sample.mp4">
              <Button className="cursor-pointer" color="cyan" variant="outline">
                {item.path} ({item.size})
              </Button>
            </a>
          ))}
        </div>
      </div>
    </Card>
  );
};

const showMagLinkName = (link) => {
  const dnMatch = link.match(/dn=([^&]*)/);
  return dnMatch ? dnMatch[1] : link.split("&")[0];
};

const MangentLinkTable = ({ links = [] }) => (
  <div className="w-full mt-10 bg-base-100 rounded p-2">
    <div className="pb-2 flex justify-between">
      <div className="text-xl font-ma">磁力链接({links.length})</div>
    </div>
    <div className="overflow-x-auto mt-2">
      <Table.Root variant="surface">
        <Table.Header>
          <Table.Row align="center">
            <Table.ColumnHeaderCell>链接名称</Table.ColumnHeaderCell>
            <Table.ColumnHeaderCell>大小</Table.ColumnHeaderCell>
            <Table.ColumnHeaderCell>添加时间</Table.ColumnHeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body className="overflow-x-auto">
          {links.map((link, index) => (
            <Table.Row key={index}>
              <Table.RowHeaderCell>
                <div className="flex items-center space-x-2 overflow-hidden">
                  <a className="hover:underline truncate" href={link.linkUrl} title={showMagLinkName(link.linkUrl)}>
                    {showMagLinkName(link.linkUrl)}
                  </a>
                  <CopyToClipboard
                    text={link.linkUrl}
                    onCopy={() => {
                      message.success("复制成功", 1000);
                    }}
                  >
                    <IconButton
                      size="1"
                      aria-label="Copy value"
                      color="gray"
                      variant="ghost"
                    >
                      <CopyIcon />
                    </IconButton>
                  </CopyToClipboard>
                </div>
              </Table.RowHeaderCell>
              <Table.Cell className="whitespace-nowrap">{link.size}</Table.Cell>
              <Table.Cell className="whitespace-nowrap">{link.uploadTime}</Table.Cell>
            </Table.Row>
          ))}
        </Table.Body>
      </Table.Root>

      {/* <Table removeWrapper aria-label="Example static collection table">
        <TableHeader>
          <TableColumn>链接名称</TableColumn>
          <TableColumn>大小</TableColumn>
          <TableColumn>添加时间</TableColumn>
        </TableHeader>
        <TableBody>
          {links.map((link, index) => (
            <TableRow key={link.id}>
              <TableCell>
                <a className="hover:underline" href={link.linkUrl}>
                  {showMagLinkName(link.linkUrl)}
                </a>
              </TableCell>
              <TableCell>{link.size}</TableCell>
              <TableCell>{link.uploadTime}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table> */}
    </div>
  </div>
);

const RelMovies = ({ actress = [] }) => {
  const [relMovies, setRelMovies] = useState([]);
  const getImages = async () => {
    const resp = await fetch("/api/movies/wallpaper", { method: "get" });
    const { wallpapers } = await resp.json();
    return wallpapers;
  };

  const getRelMovies = async () => {
    const [resp, wallpapers] = await Promise.all([
      fetch(`/api/movies/actressRel`, {
        method: "POST",
        body: JSON.stringify({
          actress: actress,
        }),
      }),
      getImages(),
    ]);

    const data = await resp.json();
    const processedData = data?.map((x) => {
      const coverUrl = `http://127.0.0.1:9000/wallpaper2/${
        wallpapers[Math.floor(Math.random() * wallpapers.length)]
      }`;
      let releaseDate = x.releaseDate;
      if (releaseDate) {
        const date = new Date(releaseDate);
        releaseDate = date.toISOString().split("T")[0];
      }
      return { ...x, coverUrl, releaseDate };
    });

    setRelMovies(processedData);
  };
  useEffect(() => {
    getRelMovies();
  }, [actress]);
  const router = useRouter();

  const handleMoviesClick = (v) => {
    router.push(`/movies/${v}`);
  };

  if (!relMovies) {
    return (
      <div className="h-full w-full flex items-center justify-center">
        <Spinner size="3" />
      </div>
    );
  }

  return (
    <div className="w-full mt-10 bg-base-100 rounded  p-2">
      <div className="pb-2 flex justify-between">
        <div className="text-xl font-ma">她还出演过</div>
      </div>
      <div className="grid gap-3 mt-2 xl:grid-cols-3 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1">
        {relMovies.map((x) => (
          <MoviesCard
            key={x.id}
            code={x.code}
            rate={x.rate}
            rateNum={x.rateNum}
            coverUrl={x.coverUrl}
            releaseDate={x.releaseDate}
            viewCount={10}
            collected={x.collected}
            downloaded={x.downloaded}
          ></MoviesCard>
        ))}
      </div>
    </div>
  );
};

const MoviesDetail = ({ v }) => {
  const [movies, setMovies] = useState(null);

  const getImages = async () => {
    const resp = await fetch("/api/movies/wallpaper", { method: "get" });
    const { wallpapers } = await resp.json();
    return wallpapers;
  };

  useEffect(() => {
    if (!v) return;

    const getMoviesDetail = async () => {
      const [resp, wallpapers] = await Promise.all([
        fetch(`/api/movies/detail/${v}`),
        getImages(),
      ]);
      const data = await resp.json();
      data.coverUrl = `${process.env.NEXT_PUBLIC_TEST_PATH}/${
        wallpapers[Math.floor(Math.random() * wallpapers.length)]
      }`;
      data.files.forEach((x) => {
        x.path = `${process.env.NEXT_PUBLIC_TEST_PATH}/${
          wallpapers[Math.floor(Math.random() * wallpapers.length)]
        }`;
      });
      setMovies(data);
    };
    getMoviesDetail();
  }, [v]);

  if (!v) {
    return <div>No movie selected</div>;
  }

  if (!movies) {
    return (
      <div className="h-full w-full flex items-center justify-center">
        <Spinner size="3" />
      </div>
    );
  }

  const {
    code,
    rate,
    releaseDate,
    rateNum,
    duration,
    actresses,
    tags,
    magnetLinks,
    files,
    coverUrl,
    collected,
    videoResource,
  } = movies;

  return (
    // <div className="no-scrollbar mx-auto">
    <>
      <MoviesInfo
        code={code}
        coverUrl={coverUrl}
        score={rate}
        releaseDate={releaseDate}
        rateNum={rateNum}
        duration={duration}
        actress={actresses}
        collected={collected}
        moviesTagList={tags}
        videoFirst={videoResource[0] || null}
      ></MoviesInfo>
      <DownloadResource videoResource={videoResource}></DownloadResource>
      <MoviesPreview mediaUrls={files} />
      <MangentLinkTable links={magnetLinks}></MangentLinkTable>
      <RelMovies actress={actresses.map((x) => x.actressName)}></RelMovies>
    </>
  );
};

export default MoviesDetail;
